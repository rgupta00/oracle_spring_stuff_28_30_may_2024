Spring with spring boot - 3 days
==================================

requirment:
------------
core java
jdbc: way to connection to db
servlet jsp
some knowlege of design pattern
	will discuss

SW: java 17
	sts 4: ide eclipse
	maven 3.6: build tool, it automcatically download the jar files
		any framework in java ---> jar
		
	mysql
	postman
	
Day-1
---------
Spring Introduction
•	Shortcomings of Java EE and the Need for Loose Coupling
•	Managing Beans, The Spring Container, Inversion of Control
•	The Factory Pattern
•	Configuration Metadata - XML, @Component, Auto-Detecting Beans
•	Dependencies and Dependency Injection (DI) with the BeanFactory
•	Setter Injection
 Dependency Injection
•	Using the Application Context
•	Constructor Injection
 The Spring Container and API
•	The Spring Managed Bean Lifecycle
•	Autowiring Dependencies
 
Other Metadata Configurations
•	Annotation Configuration @Autowired, @Required, @Resource
•	@Component
•	@Value and @Qualifier
•	Life Cycle Annotations
•	Java Configuration, @Configuration, XML free configuration 
•	The AnnotationConfigApplicationContext



oracle or mysql

 mysql 8.x
 
 
Spring framework:
-------------------
java framework that make sw easy 
Depdendency injection
	loose coupling
	
	pull vs push
	
	spring framework act as a container and manage the life cycle of the beans
	Car , Passanger, AccountService, AccountDao
	
	how to configure the beans:
	----------------------------
	1. pure xml
	2.xml + annotation
	3. java config + annotation (spring boot)
	
	what are main annotation we hv done :
	---------------------------------------
	
			@Component
			 |
		--------------------------------------------------
		|						|						|
		@Controller			@Service				@Repository
		
		controller				service					Repository
		
		
		
		@Autowire
			DI at 3 places:
			
				1. field injection    XX
				2. setter injection  (non mandatory dep)
				3. ctr injection   (mandatory dep)
				
		Spring profile:
		------------------
		@Profile("test")
		
		VM arg:
		-Dspring.profiles.active=dev
		
		u can swap the implementation with out changing the code
		
		
		web---------------- service ----------------repository ----------- db
		
		ravi				mohit						anil (hashmap)
															jdbc
															
				
				
				
spring basics
jdbc basics
jpa basics

Spring boot: (most poplular framewrok in java)
------------------------------------------------
H2 database with spring boot
h2 is in memory database


spring REST
bank application
ex handling
validation
database with h2
spring security
microservice idea
docker
		
		
		
		
	
	
 
 
 
 
 

Day 2:
-----
Spring and Persistence
•	Spring and JDBC
•	Spring and ORM

Spring Boot
Spring Boot Framework – High Level Overview
•	Spring Architecture
•	Spring Containers
•	Spring Bean Lifecycle
•	Spring DI
•	Spring Autowiring


Day 3:
---------
Spring Boot – Database Integration
•	Spring Boot – JDBC
•	Spring Boot – JPA
•	Spring Boot – Data
Introduction to Actuator

RESTful Web Services
•	Core REST concepts
•	REST support in Spring
•	Use Spring MVC to create RESTful Web services
•	REST specific Annotations in Spring
•	URITemplates, @PathVariable, @RequestParam
•	JSON and XML data exchange
•	@RequestMapping




Introduction to Java EE and problems
---------------------------

intro to spring framework:
---------------------------
Spring is java framework for simplification of sw development
it have many modules

Spring framework important modules:

What is spring boot?
-----------------

Why spring boot
	
Now we have spring boot:
	



Spring Dependency Injection 
---------------------------

Need of Dependency Injection?

loose coupling and high cohesion?

A passanger is traveling using a car



Spring DI using XML
Spring DI using annotation

	they do the same job
	aka meta data for srping to tell what to do
	
	
@Component
@Autowire 
replace lots of xml

spring xml----> annotation
how to force spring to go for annotations?

@Bean vs @Component
these are 2 ways to create bean using annotation
are they same... not


NoUniqueBeanDefinitionException: No qualifying bean of type
 'com.busycoder.demo4.Vehicle' available: expected single matching bean but found 2: car,bike


Spring DI using java configuration
done
spring dependency injection important annotation
done

spring profile:
it allow you to swap the bean impl at run time without changing the code :)
devops: dev, test, pre-prod , prod

NoSuchBeanDefinitionException

spring bean life cycle basics
spring core interview questions

Spring DI bankapplication

3 tier app:

						@Component
						   |
	----------------------------------------------------
	|						|							|
@controller					@Service				@Repository
@RestController

						
web ---------------------- service --------------- dao layer -------------db


transfer the fund
deposit
withdraw




Spring boot REST bank application step by step :
-----------------------------------------------
=> Spring boot REST application
=> Spring data
=> Spring boot exception handing
=> Spring boot validation
=>Spring boot Monotring and Logging
=> spring boot profile
=> spring boot actuator
=> Spring Boot microservice architecture
=> spring boot openfeign
=> Spring boot security


=> Spring boot REST application
-----------------------------------
Step 1: create spring boot application : web, devtools

step 2: create repository layer
-----------------------------
class Account{
	private int id;
	private String name;
	private double amount;
}
public interface AccountDao {
    public List<Account> getAll();
    public Account getById(int id);
    public void updateAccount(Account account);
}

@Repository
public class AccountDaoImplMap implements AccountDao{

    private Map<Integer, Account> map=new HashMap<>();
    public AccountDaoImplMap(){
        map.put(1, new Account(1,"amit",1000));
        map.put(2, new Account(2,"sumit",1000));
    }
    @Override
    public List<Account> getAll() {
        return new ArrayList<>(map.values());
    }

    @Override
    public Account getById(int id) {
        return map.get(id);
    }

    @Override
    public void updateAccount(Account account) {
        map.put(account.getId(), account);
    }
}

Step 3: create service layer and implementation
-------------------------
public interface AccountService {
    public List<Account> getAll();
    public Account getById(int id);
    public void transfer(int fromId, int toId, double amount);
    public void deposit(int fromId, double amount);
    public void withdraw(int fromId, double amount);
}


@Service
public class AccountServiceImpl implements AccountService{

    private AccountDao accountDao;

    @Autowired
    public AccountServiceImpl(AccountDao accountDao) {
        this.accountDao = accountDao;
    }

    @Override
    public List<Account> getAll() {
        return accountDao.getAll();
    }

    @Override
    public Account getById(int id) {
      return accountDao.getById(id).orElseThrow(()->new BankAccountNotFoundException("bank account with id "+id +" is not found"));
    }

    @Override
    public void transfer(int fromId, int toId, double amount) {
        Account fromAcc=getById(fromId);//load both the acc in memory
        Account toAcc=getById(toId);
        fromAcc.setAmount(fromAcc.getAmount()-amount);
        toAcc.setAmount(toAcc.getAmount()+amount);
        accountDao.updateAccount(fromAcc);
        accountDao.updateAccount(toAcc);
    }

    @Override
    public void deposit(int fromId, double amount) {
        Account acc=getById(fromId);
        acc.setAmount(acc.getAmount()+amount);
        accountDao.updateAccount(acc);
    }

    @Override
    public void withdraw(int fromId, double amount) {
        Account acc=getById(fromId);
        acc.setAmount(acc.getAmount()-amount);
        accountDao.updateAccount(acc);
    }
}

step 4: Write excpetion
-----------------------------
public class BankAccountNotFoundException extends RuntimeException {
	private static final long serialVersionUID = 1L;

	public BankAccountNotFoundException(String message) {
		super(message);
	}
}


step 5: Write Controllers
-----------------------------
AccountCrudController
---------------------------------



@Controller
@ResponseBody
public class AccountCrudController {
	
	private AccountService accountService;
	
	@Autowired
	public AccountCrudController(AccountService accountService) {
		this.accountService = accountService;
	}


	//@ResponseBody annotation ie contain inside @RestController automatically covert java object to json
	//-----------get all accounts-----
	@GetMapping(path = "accounts")
	public List<Account> getAll(){
		return accountService.getAll();
	}
	
	//------------get account by id--------
	@GetMapping(path = "accounts/{id}")
	public Account getById(@PathVariable  int id) {
		return accountService.getById(id);
	}
	
	
	//------------add account-------
	
	
	//------------delete account by id--------
	
	
	//------------update account by id--------

}



step 5: Write Controllers
-----------------------------
TransctionController
---------------------------------

We need to write dto also

public class TransferDto {
	private Integer fromAccId;
	private Integer toAccId;
	private double amount;
	//getter setter ctr etc
}

public class DepositDto {
	private Integer accId;
	private double amount;
}

public class WithdrawDto {
	private Integer accId;
	private double amount;
}



@RestController
public class TransctionController {

	private AccountService accountService;

	public TransctionController(AccountService accountService) {
		this.accountService = accountService;
	}
	
	//from postman i am sending json that need to be converted to java object: @RequestBody
	// transfer
	@PostMapping(path="transfer")
	public String transfer(@RequestBody  TransferDto transferDto) {
		accountService.transfer(transferDto.getFromAccId(),transferDto.getToAccId()	 , transferDto.getAmount());
		return "fund transfer successfully";
	}
	
	//deposit
	@PostMapping(path="deposit")
	public String deposit(@RequestBody  DepositDto depositDto) {
		accountService.deposit(depositDto.getAccId(), depositDto.getAmount());
		return "fund deposit successfully";
	}
	
	//withdraw
	@PostMapping(path="withdraw")
	public String withdraw(@RequestBody  WithdrawDto withdrawDto) {
		accountService.withdraw(withdrawDto.getAccId(), withdrawDto.getAmount());
		return "fund withdra successfully";
	}
	
}


step 5: Test with postman
------------------------

all accounts : get
http://localhost:9090/accounts

get a particular account:
http://localhost:9090/accounts/1


Fund transfer : Post
http://localhost:9090/transfer

{
    "fromAccId": 1,
    "toAccId": 2,
    "amount": 10
}

Fund deposit : Post
http://localhost:9090/deposit

{
    "accId": 1,
    "amount": 10
}


Fund withdraw : Post
http://localhost:9090/withdraw

{
    "accId": 1,
    "amount": 10
}




--------------------------


in case of h2 database :
---------------------

server.port=8090
server.servlet.context-path=/productapp
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Custom H2 Console URL
spring.h2.console.path=/h2

spring.jpa.hibernate.ddl-auto=update

logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR

spring.jpa.show-sql=true 

















interview questions:
https://github.com/altafjava/spring-interview-questions-answers
https://stackoverflow.com/questions/11316688/inversion-of-control-vs-dependency-injection-with-selected-quotes-is-my-unders
https://stackoverflow.com/questions/6550700/inversion-of-control-vs-dependency-injection
